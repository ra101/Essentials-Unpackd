#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

# Copyright (c) 2014-2015 Andrew Kesterson, Rachel Wall
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
require 'optimist'
require 'rvpacker'

version_string = <<-EOS.chomp!
rvpacker #{Rvpacker::VERSION}
Copyright (c) 2013 Howard Jeng, 2014-2015 Andrew Kesterson, Rachel Wall
EOS

opts = Optimist.options do
  version version_string
  banner <<-EOS
#{version_string}

rvpacker packs and unpacks binary RPG Maker project data to and from YAML so
that it can be version-controlled and collaborated on.

Usage:
        rvpacker {--pack|--unpack} [options]

Options:
EOS

  # NOTE: The `--action` option is deprecated and will likely be removed in the
  #   future.
  opt :action, 'Action to perform on the project (pack|unpack)', type: String
  opt :pack, 'Pack YAML into binary RPG Maker data'
  opt :unpack, 'Unpack binary RPG Maker data to YAML'
  opt :project, 'RPG Maker project directory', short: 'd', type: String
  opt :project_type, 'Project type (xp|vx|ace)', short: 't', type: String
  opt :database, 'Only work on the given database', short: 'D', type: String
  opt :force, 'Update target even when source is older than target'
  opt :verbose, 'Print verbose information while processing', short: 'V'
end

# Fail fast if any of the `pack`, `unpack`, or `action` options are combined.
if Rvpacker::Util.combined_action?(opts)
  Optimist.die('--pack, --unpack, and --action cannot be combined')
end

# Attempt to parse which action to perform (packing YAML to binary data or
# unpacking binary data to YAML). Warn if the `action` option was used, as it
# is likely to be removed in the future and fail fast if the action is Unknown
# or missing entirely.
if opts[:action]
  warn 'Warning: --action is deprecated; please use either --pack or --unpack.'
  action =
    case opts[:action]
    when 'pack'   then :all_text_to_bin
    when 'unpack' then :all_bin_to_text
    else Optimist.die("Unknown action: #{opts[:action]}")
    end
else
  if opts[:pack] || opts[:unpack]
    action = :all_text_to_bin if opts[:pack]
    action = :all_bin_to_text if opts[:unpack]
  else
    Optimist.die('No action specified! Please use --pack or --unpack')
  end
end

# Attempt to use the current working directory as the project directory if the
# project directory was not given by the user when running `rvpacker`. Fail
# fast if the directory does not appear to contain a valid RPG Maker project.
opts[:project] ||= Dir.pwd
opts[:project] = File.expand_path(opts[:project])

unless Rvpacker::Util.valid_project?(opts[:project])
  Optimist.die("#{opts[:project]} is not a valid RPG Maker project")
end

# We should only have the `:project_type` key if it has been given by the user.
# If we have it, coerce it into a symbol for use in `RGSS.serialize`;
# otherwise, attempt to determine the project type. Fail fast if the project
# type is invalid or could not be determined.
if opts[:project_type]
  opts[:project_type] = opts[:project_type].to_sym
else
  opts[:project_type] = Rvpacker::Util.project_type_for(opts[:project])
end

unless [:xp, :vx, :ace].any? { |type| opts[:project_type] == type }
  if opts[:project_type]
    Optimist.die("#{opts[:project_type]} is not a valid RPG Maker project type")
  else
    # NOTE: This is unlikely to happen, but absolutely possible.
    Optimist.die('Could not determine a valid RPG Maker project type')
  end
end

# TODO: Remove the reliance on $VERBOSE for printing information.
$VERBOSE = opts[:verbose]

# Set up the default extra options passed to `RGSS.serialize`.
extra_opts = {
  database:    opts[:database],
  force:       opts[:force],
  line_width:  -1,
  table_width: -1
}

RGSS.serialize(opts[:project_type].to_sym, action, opts[:project], extra_opts)
