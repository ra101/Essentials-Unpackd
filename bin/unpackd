#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

# Copyright (c) 2014-2015 Andrew Kesterson, Rachel Wall
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
require 'optimist'
require 'unpackd'

version_string = <<-EOS.chomp!
unpackd #{Unpackd::VERSION}
Copyright (c) 2013 Howard Jeng, 2014-2015 Andrew Kesterson, Rachel Wall
EOS

opts = Optimist.options do
  version version_string
  banner <<-EOS
#{version_string}

unpackd packs and unpacks binary RPG Maker project data to and from YAML so
that it can be version-controlled and collaborated on.

Usage:
        unpackd {--pack|--unpack} [options]

Options:
EOS

  # NOTE: The `--action` option is deprecated and will likely be removed in the
  #   future.
  opt :action, 'Action to perform on the project (pack|unpack)', type: String
  opt :combine, 'Pack YAML into binary RPG Maker data', short: 'c'
  opt :extract, 'Unpack binary RPG Maker data to YAML', short: 'e'
  opt :files, 'File Names for .rxfiles to operate on', short: 'f', type: :strings, default: ["*"]
  opt :force, 'Used with `--combine` to will Pack Data Forcefully'
  opt :verbose, 'Print verbose information while processing', short: 'V'
  opt :d, 'Do Not Use! Encode Single YAML file'
end

project = File.expand_path(Dir.pwd)
project = "/mnt/d/code.RA/pokemon-essentials"
action = :combine if opts[:combine]
action = :extract if opts[:extract]
action = :d if opts[:d]

if action.nil?
  Optimist.die('Error: Either `--combine` or `--extract` must be Specified!')
end

if Unpackd::Utils.combined_action?(opts)
  Optimist.die('Error: Use Either `--combine` or `--extract`, not Both!')
end

if Unpackd::Utils.invalid_project?(project)
  Optimist.die("#{project} is not a valid RPG Maker project")
end

if opts[:d]
  files = Unpackd::Utils.get_ymlfile_paths(opts[:files], project)
  exec("echo '# Error'") if files.length != 1
else
  files = Unpackd::Utils.get_rxfile_paths(opts[:files], project)
  Optimist.die('Error: Zero files Selected!') if files.empty?
end

$VERBOSE = opts[:verbose] if not opts[:d]
RGSS.serialize(action, project, files, opts[:force])
