#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

# Copyright (c) 2014-2015 Andrew Kesterson, Rachel Wall
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
lib = File.join(File.expand_path('..', File.expand_path('..', __FILE__)), 'lib')
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'optimist'
require 'unpackd'

version_string = <<-EOS.chomp!
Essentials Unpack\'d v#{Unpackd::VERSION}
EOS

opts = Optimist.options do
  version version_string
  banner <<-EOS
#{version_string}

`unpackd` is a tool for PokÃ©mon Essentials, to extract data binaries (.rxdata)
  to readable .rb and .yaml files and to combine them back, thus making
  your game to be version-controlled and to be collaborated on.

Usage:
        unpackd {--extract|--combine|-b|-r} [options]

Options:
EOS
  opt :extract, 'Extract given binaries(.rxdata) into individual .yaml/.rb', short: 'e'
  opt :combine, 'Combine given .yaml/.rb files into binaries(.rxdata)', short: 'c'
  opt :backup, 'Make Backup for given binary(.rxdata) files', short: 'b'
  opt :revert, 'Revert given binary(.rxdata) from Backup Folder', short: 'r'

  opt :project, "Essentials project path. (default: Current Folder)", short: "d", type: String
  opt :files, 'File Names for .rxdata/.yaml/.rb to operate on.', short: 'f', type: :strings, default: ["*"]

  opt :force, 'Used with `--combine` to Pack Data Forcefully', short: 'F'
  opt :silent, 'Do not output any information while processing', short: 's'
  # opt :yml2rb, 'Encode Single YAML file'
end

project = File.expand_path(opts[:project] || Dir.pwd)
action = :combine if opts[:combine]
action = :extract if opts[:extract]
action = :backup if opts[:backup]
action = :revert if opts[:revert]
# action = :yml2rb if opts[:yml2rb]

if action.nil?
  Optimist.die('Either `--combine`, `--extract`, `--backup` or `--revert` must be Specified!')
end

if Unpackd::Utils.combined_action?(opts)
  Optimist.die('Use Either `--combine`, `--extract`, `--backup` or `--revert`, Only One!')
end

if opts[:force] and not opts[:combine]
  Optimist.die('`--force` only works for `--combine`!')
end

if Unpackd::Utils.invalid_project?(project)
  Optimist.die("#{project} is not a valid RPG Maker project")
end

if opts[:extract] or opts[:backup]
  files = Unpackd::Utils.get_rxfile_paths(opts[:files], project)
elsif opts[:combine]
  files = Unpackd::Utils.get_ymlfile_paths(opts[:files], project)
end

if opts[:revert]
  files = Unpackd::Utils.get_backup_paths(opts[:files], project)
else
  files += Unpackd::Utils.get_scripts_paths(opts[:files], project)
end

$SILENT = opts[:silent] # if not opts[:yml2rb]
RGSS.serialize(action, project, files, opts[:force])
